#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;

out vec2 TexCoords;
out vec3 Pos;
out vec3 Normal;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main()
{
    TexCoords = aTexCoords;
    Pos = vec3(model * vec4(aPos, 1.0)); //Pos needs to be in world space, here aPos becomes vec4 so we can multiply with 4x4 model matrix
    Normal = mat3(transpose(inverse(model))) * aNormal; //Multiply with normal matrix
    gl_Position = projection * view * model * vec4(aPos, 1.0);
    //uv = (gl_Position.xy / gl_Position.w) * (0.5) + vec2(0.5);
}
